kube-prometheus-stack:
  crds:
    enabled: false
  defaultRules:
    create: true
  global:
    rbac:
      create: true
      createAggregateClusterRoles: true
  alertmanager:
    enabled: true
    config:
      route:
        group_by: ["namespace","alertname"]
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 24h
        receiver: discord
        routes:
          - receiver: "null"
            matchers:
              - alertname = "Watchdog"
          - receiver: 'pushover'
            group_wait: 10s
            group_interval: 5m
            repeat_interval: 24h
            matchers:
              - severity = "critical"
      receivers:
        - name: "null"
        - name: discord
          discord_configs:
            - send_resolved: true
              webhook_url_file: /etc/alertmanager/secrets/alertmanager-config-secret/discord_webhook
        - name: pushover
          pushover_configs:
            - send_resolved: true
              user_key_file: /etc/alertmanager/secrets/alertmanager-config-secret/user_key
              token_file: /etc/alertmanager/secrets/alertmanager-config-secret/pushover_token
    ingress:
      enabled: true
      ingressClassName: traefik
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        cert-manager.io/cluster-issuer: letsencrypt-issuer
      hosts:
        - alertmanager.alexlebens.net
      tls:
        - secretName: alertmanager-secret-tls
          hosts:
            - alertmanager.alexlebens.net
    alertmanagerSpec:
      secrets:
        - alertmanager-config-secret
      replicas: 1
    externalUrl: https://alertmanager.alexlebens.net
  grafana:
    enabled: false
  kubeApiServer:
    tlsConfig:
      insecureSkipVerify: true
  kubeControllerManager:
    endpoints:
      - 192.168.1.35
      - 192.168.1.36
      - 192.168.1.37   
    service:
      port: 6443
      targetPort: 6443           
    serviceMonitor:
      https: false
      insecureSkipVerify: true
  kubeScheduler:
    endpoints:
      - 192.168.1.35
      - 192.168.1.36
      - 192.168.1.37   
    service:
      port: 6443
      targetPort: 6443      
    serviceMonitor:
      https: false
      insecureSkipVerify: true
  kubeProxy:
    enabled: false
  kube-state-metrics:
    selfMonitor:
      enabled: true
  nodeExporter:
    operatingSystems:
      darwin:
        enabled: false
  prometheusOperator:
    admissionWebhooks:
      enabled: true
    namespaces:
      releaseNamespace: true
      additional:
        - kube-system
        - argocd
        - authentik
        - cert-manager
        - gitea
        - grafana
        - home-assistant
        - loki
        - rook-ceph        
        - speedtest-exporter
        - unpoller
        - vault
        - lidarr2
        - qbittorrent
        - radarr5-4k
        - radarr5
        - sonarr4-4k
        - sonarr4
        - tdarr2
  prometheus:
    ingress:
      enabled: true
      ingressClassName: traefik
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        cert-manager.io/cluster-issuer: letsencrypt-issuer
      hosts:
        - prometheus.alexlebens.net
      tls:
        - secretName: prometheus-secret-tls
          hosts:
            - prometheus.alexlebens.net
    prometheusSpec:
      scrapeInterval: 30s
      retention: 30d
      externalUrl: https://prometheus.alexlebens.net
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: nfs-client
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 1Gi
